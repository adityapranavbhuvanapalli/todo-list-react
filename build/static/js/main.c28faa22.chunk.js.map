{"version":3,"sources":["logo.svg","components/Tasks.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","nested","paddingLeft","spacing","Tasks","_ref","tasks","deleteTask","classes","_React$useState","React","useState","_React$useState2","Object","slicedToArray","open","setOpen","console","log","taskList","length","react_default","a","createElement","List","map","task","ListItem","button","onClick","alert","key","id","ListItemAvatar","Avatar","Work_default","ListItemText","primary","name","ExpandLess_default","ExpandMore_default","ListItemSecondaryAction","IconButton","edge","aria-label","Delete_default","Collapse","in","timeout","unmountOnExit","component","disablePadding","className","ListItemIcon","Book_default","desc","App","state","_this","filter","setState","addTask","newId","concat","toConsumableArray","_this2","this","Paper","elevation","AppBar","position","Typography","variant","components_Tasks","Button","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c28faa22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport WorkIcon from '@material-ui/icons/Work';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport BookIcon from '@material-ui/icons/Book';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: 360,\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst Tasks = ({tasks,deleteTask}) => {\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClick = () => {\r\n        // setOpen(!task.open);\r\n        alert(\"Feature under development\")\r\n        setOpen(!open)\r\n    };\r\n\r\n    console.log(open)\r\n\r\n    const taskList = tasks.length ? (\r\n        <List>\r\n            {\r\n                tasks.map(task => {return(\r\n                <div>\r\n                    <ListItem button onClick={()=>handleClick(task)} key={task.id}>\r\n                        <ListItemAvatar>\r\n                        <Avatar>\r\n                            <WorkIcon />\r\n                        </Avatar>\r\n                        </ListItemAvatar> \r\n                        <ListItemText\r\n                        primary={task.name}\r\n                        />\r\n                        {open ? <ExpandLess /> : <ExpandMore />}\r\n                        <ListItemSecondaryAction>\r\n                        <IconButton edge=\"end\" aria-label=\"delete\">\r\n                            <DeleteIcon onClick={() => deleteTask(task.id)}/>\r\n                        </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <List component=\"div\" disablePadding>\r\n                            <ListItem className={classes.nested}>\r\n                            <ListItemIcon>\r\n                                <BookIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={task.desc} />\r\n                            </ListItem>\r\n                        </List>\r\n                    </Collapse>\r\n                </div>\r\n                )})\r\n            }\r\n        </List>\r\n    )\r\n    : (<p>Add a task to the Todo-List</p>)\r\n    return (\r\n        <div className=\"tasks\">\r\n            {taskList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasks;\r\n\r\n\r\n","import React, { Component } from 'react';\nimport { Paper, Button } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport logo from './logo.svg';\nimport './App.css';\nimport Tasks from './components/Tasks'\n\nexport default class App extends Component {\n  state = {\n    tasks: [\n      {id:1, name:'Task 1', desc:\"This is a description of Task 1\"},\n      {id:2, name:'Task 2', desc:\"This is a description of Task 2\"},\n      {id:3, name:'Task 3', desc:\"This is a description of Task 3\"}\n    ]\n  }\n\n  deleteTask = (id) => {\n    const tasks = this.state.tasks.filter(task => {\n      return task.id !== id\n    });\n    this.setState({tasks});\n  }\n\n  addTask = () => {\n    const newId = this.state.tasks.length+1;\n    this.setState(state => {\n      const tasks = [\n        ...state.tasks, \n        {\n          id : newId,\n          name : \"Task \"+newId,\n          desc : \"This is a description of Task \" + newId \n        }     \n      ];\n \n      return {\n        tasks\n      };\n    });\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Paper elevation={3}>\n          <AppBar position=\"static\">\n            <Typography variant=\"h4\">To-do List</Typography>\n          </AppBar>\n          <Tasks tasks={this.state.tasks} deleteTask={this.deleteTask}/>\n          <Button color=\"primary\" onClick={()=>{this.addTask()}}>Add new Task</Button>\n        </Paper>\n      </div>\n    );\n  }\n}\n\n{/* <AppBar position=\"static\">\n  <Toolbar>\n    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n      <MenuIcon />\n    </IconButton>\n    <Typography variant=\"h6\" className={classes.title}>\n      News\n    </Typography>\n    <Button color=\"inherit\">Login</Button>\n  </Toolbar>\n</AppBar> */}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}